"use strict";(self.webpackChunkopensergo_github_io=self.webpackChunkopensergo_github_io||[]).push([[9430],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return g}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=p(t),g=o,m=f["".concat(s,".").concat(g)]||f[g]||l[g]||i;return t?n.createElement(m,a(a({ref:r},u),{},{components:t})):n.createElement(m,a({ref:r},u))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},899:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var n=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={sidebar_position:3},s="OpenSergo Architecture",p={unversionedId:"what-is-opensergo/architecture",id:"what-is-opensergo/architecture",title:"OpenSergo Architecture",description:"OpenSergo mainly contains these modules:",source:"@site/docs/what-is-opensergo/architecture.md",sourceDirName:"what-is-opensergo",slug:"/what-is-opensergo/architecture",permalink:"/docs/what-is-opensergo/architecture",editUrl:"https://github.com/opensergo/opensergo.github.io/tree/main/docs/what-is-opensergo/architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"OpenSergo Concepts",permalink:"/docs/what-is-opensergo/concepts"},next:{title:"Feature List",permalink:"/docs/what-is-opensergo/feature-list"}},u={},l=[],f={toc:l};function g(e){var r=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"opensergo-architecture"},"OpenSergo Architecture"),(0,i.kt)("p",null,"OpenSergo mainly contains these modules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OpenSergo Spec: the universal specification for microservice governance."),(0,i.kt)("li",{parentName:"ul"},"OpenSergo SDK: data planes may leverage the OpenSergo SDK to subscribe and retrieve OpenSergo config."),(0,i.kt)("li",{parentName:"ul"},"OpenSergo Control Plane (responsible for receiving reported metadata and delivering service governance rules) : End users can view and modify service governance configurations (OpenSergo CRD) via the OpenSergo control plane."),(0,i.kt)("li",{parentName:"ul"},"Data plane (responsible for receiving and applying service governance configuration) : generally refers to various microservice frameworks that have integrated with OpenSergo.")))}g.isMDXComponent=!0}}]);